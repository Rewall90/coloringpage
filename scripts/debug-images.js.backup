#!/usr/bin/env node

/**
 * Debug Image System
 *
 * Utility script to inspect the image download system state,
 * view manifest, and troubleshoot issues.
 */

import fs from 'fs';
import path from 'path';

import { loadManifest } from './utils/image-download-helpers.js';

const STATIC_DIR = path.resolve(process.cwd(), 'static');
const IMAGES_DIR = path.join(STATIC_DIR, 'images');

function formatBytes(bytes) {
  if (bytes === 0) {
    return '0 Bytes';
  }
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function scanLocalImages() {
  if (!fs.existsSync(IMAGES_DIR)) {
    return { files: [], totalSize: 0, directories: [] };
  }

  const files = [];
  const directories = [];
  let totalSize = 0;

  function scanDirectory(dir, relativePath = '') {
    const items = fs.readdirSync(dir);

    for (const item of items) {
      const fullPath = path.join(dir, item);
      const relPath = path.join(relativePath, item).replace(/\\/g, '/');
      const stats = fs.statSync(fullPath);

      if (stats.isDirectory()) {
        directories.push(relPath);
        scanDirectory(fullPath, relPath);
      } else if (stats.isFile() && !item.startsWith('.')) {
        files.push({
          path: relPath,
          size: stats.size,
          modified: stats.mtime,
        });
        totalSize += stats.size;
      }
    }
  }

  scanDirectory(IMAGES_DIR);

  return { files, totalSize, directories };
}

function debugImages() {
  console.log('üîç Image System Debug Information\n');

  // Check directories
  console.log('üìÅ Directory Structure:');
  if (fs.existsSync(STATIC_DIR)) {
    console.log(`   ‚úÖ static/ exists`);
    if (fs.existsSync(IMAGES_DIR)) {
      console.log(`   ‚úÖ static/images/ exists`);
    } else {
      console.log(`   ‚ùå static/images/ missing`);
    }
  } else {
    console.log(`   ‚ùå static/ directory missing`);
  }

  // Load manifest
  console.log('\nüìã Download Manifest:');
  try {
    const manifest = loadManifest();
    console.log(`   Version: ${manifest.version}`);
    console.log(`   Last Update: ${manifest.lastUpdate}`);
    console.log(`   Tracked Images: ${Object.keys(manifest.images).length}`);

    if (Object.keys(manifest.images).length > 0) {
      console.log('\n   Recent Downloads:');
      const recentImages = Object.entries(manifest.images)
        .sort((a, b) => new Date(b[1].downloadedAt) - new Date(a[1].downloadedAt))
        .slice(0, 5);

      recentImages.forEach(([path, info]) => {
        const fileName = path.split('/').pop();
        const downloadTime = new Date(info.downloadedAt).toLocaleString();
        console.log(`     ‚Ä¢ ${fileName} (${formatBytes(info.fileSize)}) - ${downloadTime}`);
      });

      // Group by type
      const byType = {};
      Object.entries(manifest.images).forEach(([path, _info]) => {
        if (path.includes('/categories/')) {
          byType.categories = (byType.categories || 0) + 1;
        } else if (path.includes('/collections/')) {
          byType.collections = (byType.collections || 0) + 1;
        } else {
          byType.other = (byType.other || 0) + 1;
        }
      });

      console.log('\n   By Type:');
      Object.entries(byType).forEach(([type, count]) => {
        console.log(`     ${type}: ${count} images`);
      });
    }
  } catch (error) {
    console.log(`   ‚ùå Error loading manifest: ${error.message}`);
  }

  // Scan local files
  console.log('\nüíæ Local Files:');
  const localScan = scanLocalImages();

  if (localScan.files.length === 0) {
    console.log('   üì≠ No image files found');
  } else {
    console.log(`   üìÅ Directories: ${localScan.directories.length}`);
    console.log(`   üñºÔ∏è  Image Files: ${localScan.files.length}`);
    console.log(`   üíΩ Total Size: ${formatBytes(localScan.totalSize)}`);

    // Group by directory
    const byDirectory = {};
    localScan.files.forEach(file => {
      const dir = path.dirname(file.path);
      if (!byDirectory[dir]) {
        byDirectory[dir] = { count: 0, size: 0 };
      }
      byDirectory[dir].count++;
      byDirectory[dir].size += file.size;
    });

    console.log('\n   By Directory:');
    Object.entries(byDirectory)
      .sort((a, b) => b[1].count - a[1].count)
      .slice(0, 10)
      .forEach(([dir, stats]) => {
        console.log(`     ${dir}/: ${stats.count} files (${formatBytes(stats.size)})`);
      });
  }

  // Sync check
  console.log('\nüîÑ Sync Status:');
  try {
    const manifest = loadManifest();
    const manifestPaths = new Set(Object.keys(manifest.images));
    const localPaths = new Set(localScan.files.map(f => `/images/${f.path}`));

    const inManifestNotLocal = [...manifestPaths].filter(p => !localPaths.has(p));
    const inLocalNotManifest = [...localPaths].filter(p => !manifestPaths.has(p));

    if (inManifestNotLocal.length > 0) {
      console.log(`   ‚ö†Ô∏è  In manifest but missing locally: ${inManifestNotLocal.length}`);
      if (inManifestNotLocal.length <= 5) {
        inManifestNotLocal.forEach(path => console.log(`     ‚Ä¢ ${path}`));
      }
    }

    if (inLocalNotManifest.length > 0) {
      console.log(`   ‚ö†Ô∏è  Local files not in manifest: ${inLocalNotManifest.length}`);
      if (inLocalNotManifest.length <= 5) {
        inLocalNotManifest.forEach(path => console.log(`     ‚Ä¢ ${path}`));
      }
    }

    if (inManifestNotLocal.length === 0 && inLocalNotManifest.length === 0) {
      console.log('   ‚úÖ Manifest and local files are in sync');
    }
  } catch (error) {
    console.log(`   ‚ùå Error checking sync: ${error.message}`);
  }

  console.log('\n‚ú® Debug complete!');
}

// Run debug
debugImages();
